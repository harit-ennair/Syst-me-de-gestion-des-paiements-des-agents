package view;

import controller.AgentController;
import controller.DepartementController;
import controller.PaiementController;
import model.Agent;
import model.Departement;
import model.Paiement;
import model.enums.TypeAgent;
import model.enums.TypePaiement;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Scanner;

public class DirecteurView {
    private Scanner scanner;
    private AgentController agentController;
    private PaiementController paiementController;
    private DepartementController departementController;

    public DirecteurView() {
        this.scanner = new Scanner(System.in);
        this.agentController = new AgentController();
        this.paiementController = new PaiementController();
        this.departementController = new DepartementController();
    }

    public void afficherMenuDirecteur(int idDirecteur) {
        boolean continuer = true;

        while (continuer) {
            System.out.println("\n" + "=".repeat(60));
            System.out.println("              INTERFACE DIRECTEUR");
            System.out.println("=".repeat(60));
            System.out.println("1. Gestion globale des agents");
            System.out.println("2. Gestion des d√©partements");
            System.out.println("3. Gestion globale des paiements");
            System.out.println("4. Rapports et analyses");
            System.out.println("5. Statistiques globales");
            System.out.println("6. Contr√¥le et validation");
            System.out.println("0. Retour au menu principal");
            System.out.println("=".repeat(60));
            System.out.print("Votre choix: ");

            int choix = lireEntier();

            switch (choix) {
                case 1:
                    gestionGlobaleAgents();
                    break;
                case 2:
                    gestionDepartements();
                    break;
                case 3:
                    gestionGlobalePaiements();
                    break;
                case 4:
                    rapportsEtAnalyses();
                    break;
                case 5:
                    statistiquesGlobales();
                    break;
                case 6:
                    controleEtValidation();
                    break;
                case 0:
                    continuer = false;
                    break;
                default:
                    System.out.println("Choix invalide. Veuillez r√©essayer.");
            }
        }
    }

    private void gestionGlobaleAgents() {
        boolean continuer = true;

        while (continuer) {
            System.out.println("\n=== GESTION GLOBALE DES AGENTS ===");
            System.out.println("1. Voir tous les agents de l'entreprise");
            System.out.println("2. Ajouter un agent (tous d√©partements)");
            System.out.println("3. Modifier un agent");
            System.out.println("4. Supprimer un agent");
            System.out.println("5. Transf√©rer un agent entre d√©partements");
            System.out.println("6. Promouvoir/R√©trograder un agent");
            System.out.println("7. Rechercher un agent");
            System.out.println("8. Agents par type");
            System.out.println("0. Retour");
            System.out.print("Votre choix: ");

            int choix = lireEntier();

            switch (choix) {
                case 1:
                    voirTousLesAgents();
                    break;
                case 2:
                    ajouterAgentGlobal();
                    break;
                case 3:
                    modifierAgentGlobal();
                    break;
                case 4:
                    supprimerAgentGlobal();
                    break;
                case 5:
                    transfererAgent();
                    break;
                case 6:
                    gererPromotionAgent();
                    break;
                case 7:
                    rechercherAgent();
                    break;
                case 8:
                    afficherAgentsParType();
                    break;
                case 0:
                    continuer = false;
                    break;
                default:
                    System.out.println("Choix invalide.");
            }
        }
    }

    private void gestionDepartements() {
        boolean continuer = true;

        while (continuer) {
            System.out.println("\n=== GESTION DES D√âPARTEMENTS ===");
            System.out.println("1. Cr√©er un nouveau d√©partement");
            System.out.println("2. Modifier un d√©partement");
            System.out.println("3. Supprimer un d√©partement");
            System.out.println("4. Voir tous les d√©partements");
            System.out.println("5. Statistiques par d√©partement");
            System.out.println("6. Affecter un responsable");
            System.out.println("0. Retour");
            System.out.print("Votre choix: ");

            int choix = lireEntier();

            switch (choix) {
                case 1:
                    creerDepartement();
                    break;
                case 2:
                    modifierDepartement();
                    break;
                case 3:
                    supprimerDepartement();
                    break;
                case 4:
                    voirTousLesDepartements();
                    break;
                case 5:
                    statistiquesParDepartement();
                    break;
                case 6:
                    affecterResponsable();
                    break;
                case 0:
                    continuer = false;
                    break;
                default:
                    System.out.println("Choix invalide.");
            }
        }
    }

    private void gestionGlobalePaiements() {
        boolean continuer = true;

        while (continuer) {
            System.out.println("\n=== GESTION GLOBALE DES PAIEMENTS ===");
            System.out.println("1. Approuver/Rejeter des paiements en attente");
            System.out.println("2. Historique complet des paiements");
            System.out.println("3. Paiements par d√©partement");
            System.out.println("4. Paiements exceptionnels (gros montants)");
            System.out.println("5. Ajouter un paiement sp√©cial");
            System.out.println("6. Annuler un paiement");
            System.out.println("7. Audit des paiements");
            System.out.println("0. Retour");
            System.out.print("Votre choix: ");

            int choix = lireEntier();

            switch (choix) {
                case 1:
                    gererApprobationsPaiements();
                    break;
                case 2:
                    historiqueCompletPaiements();
                    break;
                case 3:
                    paiementsParDepartement();
                    break;
                case 4:
                    paiementsExceptionnels();
                    break;
                case 5:
                    ajouterPaiementSpecial();
                    break;
                case 6:
                    annulerPaiement();
                    break;
                case 7:
                    auditPaiements();
                    break;
                case 0:
                    continuer = false;
                    break;
                default:
                    System.out.println("Choix invalide.");
            }
        }
    }

    private void rapportsEtAnalyses() {
        boolean continuer = true;

        while (continuer) {
            System.out.println("\n=== RAPPORTS ET ANALYSES ===");
            System.out.println("1. Rapport mensuel global");
            System.out.println("2. Rapport annuel");
            System.out.println("3. Comparaison inter-d√©partements");
            System.out.println("4. √âvolution des co√ªts salariaux");
            System.out.println("5. Analyse des primes et bonus");
            System.out.println("6. Rapport de performance par agent");
            System.out.println("7. Pr√©visions budg√©taires");
            System.out.println("0. Retour");
            System.out.print("Votre choix: ");

            int choix = lireEntier();

            switch (choix) {
                case 1:
                    rapportMensuelGlobal();
                    break;
                case 2:
                    rapportAnnuel();
                    break;
                case 3:
                    comparaisonInterDepartements();
                    break;
                case 4:
                    evolutionCoutsSalariaux();
                    break;
                case 5:
                    analysePrimesBonus();
                    break;
                case 6:
                    rapportPerformanceAgent();
                    break;
                case 7:
                    previsionsBudgetaires();
                    break;
                case 0:
                    continuer = false;
                    break;
                default:
                    System.out.println("Choix invalide.");
            }
        }
    }

    private void statistiquesGlobales() {
        System.out.println("\n=== STATISTIQUES GLOBALES ===");
        System.out.println("G√©n√©ration des statistiques en cours...");

        // Simulation de statistiques (√† impl√©menter avec les vraies donn√©es)
        System.out.println("\nüìä TABLEAU DE BORD EX√âCUTIF");
        System.out.println("-".repeat(50));
        System.out.println("‚Ä¢ Nombre total d'agents: [√Ä calculer]");
        System.out.println("‚Ä¢ Nombre de d√©partements: [√Ä calculer]");
        System.out.println("‚Ä¢ Total des paiements ce mois: [√Ä calculer] ‚Ç¨");
        System.out.println("‚Ä¢ Salaire moyen: [√Ä calculer] ‚Ç¨");
        System.out.println("‚Ä¢ Budget allou√© aux primes: [√Ä calculer] ‚Ç¨");
        System.out.println("-".repeat(50));

        System.out.println("\nüìà INDICATEURS CL√âS");
        System.out.println("‚Ä¢ √âvolution des co√ªts vs mois pr√©c√©dent: [√Ä calculer]%");
        System.out.println("‚Ä¢ D√©partement le plus co√ªteux: [√Ä identifier]");
        System.out.println("‚Ä¢ Type de paiement le plus fr√©quent: [√Ä calculer]");

        System.out.println("\n‚ö†Ô∏è  ALERTES");
        System.out.println("‚Ä¢ Paiements en attente d'approbation: [√Ä v√©rifier]");
        System.out.println("‚Ä¢ Budgets d√©partementaux d√©pass√©s: [√Ä contr√¥ler]");
    }

    private void controleEtValidation() {
        boolean continuer = true;

        while (continuer) {
            System.out.println("\n=== CONTR√îLE ET VALIDATION ===");
            System.out.println("1. Valider les paiements en attente");
            System.out.println("2. Audit des comptes agents");
            System.out.println("3. V√©rification des budgets d√©partementaux");
            System.out.println("4. Contr√¥le des autorisations");
            System.out.println("5. Historique des modifications");
            System.out.println("6. Sauvegarde et export des donn√©es");
            System.out.println("0. Retour");
            System.out.print("Votre choix: ");

            int choix = lireEntier();

            switch (choix) {
                case 1:
                    validerPaiementsEnAttente();
                    break;
                case 2:
                    auditComptesAgents();
                    break;
                case 3:
                    verificationBudgetsDepartementaux();
                    break;
                case 4:
                    controleAutorisations();
                    break;
                case 5:
                    historiqueModifications();
                    break;
                case 6:
                    sauvegardeExportDonnees();
                    break;
                case 0:
                    continuer = false;
                    break;
                default:
                    System.out.println("Choix invalide.");
            }
        }
    }

    // M√©thodes d'impl√©mentation (stubs pour l'instant)
    private void voirTousLesAgents() {
        System.out.println("\n=== TOUS LES AGENTS DE L'ENTREPRISE ===");
        System.out.println("Fonctionnalit√© √† impl√©menter: afficher tous les agents avec leurs d√©partements");
    }

    private void ajouterAgentGlobal() {
        System.out.println("\n=== AJOUTER UN AGENT (NIVEAU DIRECTEUR) ===");
        // M√™me logique que ResponsableView.ajouterAgent() mais avec plus de privil√®ges
        System.out.println("Fonctionnalit√© √©tendue d'ajout d'agent...");
    }

    private void modifierAgentGlobal() {
        System.out.println("\n=== MODIFIER UN AGENT (NIVEAU DIRECTEUR) ===");
        System.out.println("Fonctionnalit√© √©tendue de modification d'agent...");
    }

    private void supprimerAgentGlobal() {
        System.out.println("\n=== SUPPRIMER UN AGENT (NIVEAU DIRECTEUR) ===");
        System.out.println("Fonctionnalit√© √©tendue de suppression d'agent...");
    }

    private void transfererAgent() {
        System.out.println("\n=== TRANSF√âRER UN AGENT ===");
        System.out.print("ID de l'agent √† transf√©rer: ");
        int idAgent = lireEntier();
        System.out.print("ID du nouveau d√©partement: ");
        int idDepartement = lireEntier();

        try {
            agentController.affecterAgentDepartement(idAgent, idDepartement);
            System.out.println("Agent transf√©r√© avec succ√®s!");
        } catch (Exception e) {
            System.out.println("Erreur lors du transfert: " + e.getMessage());
        }
    }

    private void gererPromotionAgent() {
        System.out.println("\n=== PROMOTION/R√âTROGRADATION D'AGENT ===");
        System.out.print("ID de l'agent: ");
        int idAgent = lireEntier();

        System.out.println("Nouveaux types disponibles:");
        TypeAgent[] types = TypeAgent.values();
        for (int i = 0; i < types.length; i++) {
            System.out.println((i + 1) + ". " + types[i]);
        }
        System.out.print("Choisissez le nouveau type (1-" + types.length + "): ");
        int choixType = lireEntier();

        if (choixType >= 1 && choixType <= types.length) {
            TypeAgent nouveauType = types[choixType - 1];
            System.out.println("Changement de type vers " + nouveauType + " - Fonctionnalit√© √† impl√©menter");
        } else {
            System.out.println("Choix invalide.");
        }
    }

    private void rechercherAgent() {
        System.out.println("\n=== RECHERCHER UN AGENT ===");
        System.out.print("Entrez le nom, pr√©nom ou email: ");
        String critere = scanner.nextLine();
        System.out.println("Recherche de: " + critere + " - Fonctionnalit√© √† impl√©menter");
    }

    private void afficherAgentsParType() {
        System.out.println("\n=== AGENTS PAR TYPE ===");
        TypeAgent[] types = TypeAgent.values();
        for (TypeAgent type : types) {
            System.out.println("‚Ä¢ " + type + ": [Nombre √† calculer] agents");
        }
    }

    private void creerDepartement() {
        System.out.println("\n=== CR√âER UN D√âPARTEMENT ===");
        System.out.print("Nom du d√©partement: ");
        String nom = scanner.nextLine();
        System.out.print("Description: ");
        String description = scanner.nextLine();

        try {
            departementController.creerDepartement(nom, description);
            System.out.println("D√©partement cr√©√© avec succ√®s!");
        } catch (Exception e) {
            System.out.println("Erreur: " + e.getMessage());
        }
    }

    private void modifierDepartement() {
        System.out.println("\n=== MODIFIER UN D√âPARTEMENT ===");
        System.out.print("ID du d√©partement: ");
        int idDepartement = lireEntier();
        System.out.print("Nouveau nom: ");
        String nom = scanner.nextLine();
        System.out.print("Nouvelle description: ");
        String description = scanner.nextLine();

        try {
            departementController.modifierDepartement(idDepartement, nom, description);
            System.out.println("D√©partement modifi√© avec succ√®s!");
        } catch (Exception e) {
            System.out.println("Erreur: " + e.getMessage());
        }
    }

    private void supprimerDepartement() {
        System.out.println("\n=== SUPPRIMER UN D√âPARTEMENT ===");
        System.out.print("ID du d√©partement: ");
        int idDepartement = lireEntier();

        System.out.print("√ätes-vous s√ªr? Cette action est irr√©versible (o/n): ");
        String confirmation = scanner.nextLine();

        if (confirmation.equalsIgnoreCase("o") || confirmation.equalsIgnoreCase("oui")) {
            try {
                departementController.supprimerDepartement(idDepartement);
                System.out.println("D√©partement supprim√© avec succ√®s!");
            } catch (Exception e) {
                System.out.println("Erreur: " + e.getMessage());
            }
        }
    }

    private void voirTousLesDepartements() {
        System.out.println("\n=== TOUS LES D√âPARTEMENTS ===");
        departementController.afficherTousLesDepartements();
    }

    private void statistiquesParDepartement() {
        System.out.println("\n=== STATISTIQUES PAR D√âPARTEMENT ===");
        System.out.println("Fonctionnalit√© √† impl√©menter: statistiques d√©taill√©es par d√©partement");
    }

    private void affecterResponsable() {
        System.out.println("\n=== AFFECTER UN RESPONSABLE ===");
        System.out.print("ID du d√©partement: ");
        int idDepartement = lireEntier();
        System.out.print("ID de l'agent responsable: ");
        int idAgent = lireEntier();

        System.out.println("Affectation du responsable - Fonctionnalit√© √† impl√©menter");
    }

    // Stubs pour les autres m√©thodes
    private void gererApprobationsPaiements() {
        System.out.println("Gestion des approbations de paiements - √Ä impl√©menter");
    }

    private void historiqueCompletPaiements() {
        System.out.println("Historique complet des paiements - √Ä impl√©menter");
    }

    private void paiementsParDepartement() {
        System.out.println("Paiements par d√©partement - √Ä impl√©menter");
    }

    private void paiementsExceptionnels() {
        System.out.println("Paiements exceptionnels - √Ä impl√©menter");
    }

    private void ajouterPaiementSpecial() {
        System.out.println("Ajout de paiement sp√©cial - √Ä impl√©menter");
    }

    private void annulerPaiement() {
        System.out.println("Annulation de paiement - √Ä impl√©menter");
    }

    private void auditPaiements() {
        System.out.println("Audit des paiements - √Ä impl√©menter");
    }

    private void rapportMensuelGlobal() {
        System.out.println("Rapport mensuel global - √Ä impl√©menter");
    }

    private void rapportAnnuel() {
        System.out.println("Rapport annuel - √Ä impl√©menter");
    }

    private void comparaisonInterDepartements() {
        System.out.println("Comparaison inter-d√©partements - √Ä impl√©menter");
    }

    private void evolutionCoutsSalariaux() {
        System.out.println("√âvolution des co√ªts salariaux - √Ä impl√©menter");
    }

    private void analysePrimesBonus() {
        System.out.println("Analyse des primes et bonus - √Ä impl√©menter");
    }

    private void rapportPerformanceAgent() {
        System.out.println("Rapport de performance par agent - √Ä impl√©menter");
    }

    private void previsionsBudgetaires() {
        System.out.println("Pr√©visions budg√©taires - √Ä impl√©menter");
    }

    private void validerPaiementsEnAttente() {
        System.out.println("Validation des paiements en attente - √Ä impl√©menter");
    }

    private void auditComptesAgents() {
        System.out.println("Audit des comptes agents - √Ä impl√©menter");
    }

    private void verificationBudgetsDepartementaux() {
        System.out.println("V√©rification des budgets d√©partementaux - √Ä impl√©menter");
    }

    private void controleAutorisations() {
        System.out.println("Contr√¥le des autorisations - √Ä impl√©menter");
    }

    private void historiqueModifications() {
        System.out.println("Historique des modifications - √Ä impl√©menter");
    }

    private void sauvegardeExportDonnees() {
        System.out.println("Sauvegarde et export des donn√©es - √Ä impl√©menter");
    }

    private int lireEntier() {
        while (!scanner.hasNextInt()) {
            System.out.print("Veuillez entrer un nombre valide: ");
            scanner.next();
        }
        int valeur = scanner.nextInt();
        scanner.nextLine();
        return valeur;
    }
}
